// Copyright (c) 2018, Danilo Ferreira. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of the copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

global proc string getConnectionSource(string $node, string $attribute) {
    string $source = `connectionInfo -sourceFromDestination ($node + "." + $attribute)`;
    
    return `match "^[^\.]+" $source`;
}

global proc string[] deleteFEMSystem() {
    string $solverList[] = `ls -type "femSolver"`;
    
    if (`size $solverList` == 0) {
        error "Current scene does not contain a FEM system.";
        return {};
    }
        
    for ($femSolver in $solverList) {
        string $objectList[] = `listConnections ($femSolver + ".currentState")`;
        
        for ($femObject in $objectList) {
            string $outputMeshList[] = `listConnections -shapes true ($femObject + ".outputMesh")`;
            
            string $femMesh = `getConnectionSource $femObject "inputMesh"`;
            string $inputMesh = `getConnectionSource $femMesh "inputMesh"`;
            
            string $parentList[] = `listRelatives -parent -type "transform" $inputMesh`;
            
            setAttr ($inputMesh + ".intermediateObject") false;
            setAttr ($parentList[0] + ".hiddenInOutliner") false;
            
            for ($outputMesh in $outputMeshList) {
                $parentList = `listRelatives -parent -type "transform" $outputMesh`;
                
                delete $outputMesh;
                delete $parentList[0];
            }
            
            delete $femMesh;
        }
        
        delete $femSolver;
    }

    AEdagNodeCommonRefreshOutliners();
    
    return $solverList;
}