// Copyright (c) 2018, Danilo Ferreira. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of the copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

global proc string exportFEMCache() {
    if (!`pluginInfo -query -loaded "AbcExport"`) {
        error "Alembic exporter plugin is not loaded.";
        return "";
    }
        
    string $femSolver;
    string $solverList[] = `ls -type "femSolver"`;
    
    if (`size $solverList` == 0) {
        error "Current scene does not contain a FEM system.";
        return "";
    }
    else
        $femSolver = $solverList[0];
        
    string $transformList = "";
    string $objectList[] = `listConnections ($femSolver + ".currentState")`;
    
    for ($object in $objectList) {
        string $outputMeshList[] = `listConnections -shapes true ($object + ".outputMesh")`;
        
        for ($outputMesh in $outputMeshList) {
            $parentList = `listRelatives -parent -type "transform" $outputMesh`;
            $transformList += "-root " + $parentList[0] + " ";
        }
    }

    if (`size $transformList` == 0) {
        error "Current scene does not contain output FEM meshes.";
        return "";
    }

    float $startTime = `getAttr ($femSolver + ".startTime")`;
    float $endTime = getEndTime();
    
    string $filename = `optionVar -query femCacheDirectory` +
        "/" + `optionVar -query femCacheName` + ".abc";

    string $arguments = "-frameRange " + $startTime + " " + $endTime + " " +
        $transformList + "-file " + $filename;
        
    string $failure = catch(`AbcExport -jobArg $arguments`);
    
    if ($failure) {
        error "Cannot export FEM cache to file.";
        return "";
    }
    
    return $filename;
}